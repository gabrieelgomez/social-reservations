.container
  .row
    .col-lg-2
      = link_to admin_travel_reservations_path(model_name: @model.downcase), class: "", "data-position" => "bottom", "data-tooltip" => t("keppler.actions.back") do
        .arrow-back.btn.btn-default
          %i.fa.fa-angle-left
          = t('keppler.actions.back')

  .show-section
    .row
      .col-lg-12
        .box.slice-box
          .box-header.with-border
            %h3.box-title
              Keppler Travel -> Reservación #
              #{@reservation.id}
            .box-tools.pull-right
              -# - if can?(KepplerTravel::Reservation).update?
              -#   = link_to edit_admin_travel_reservation_path(@reservation), class: "btn btn-box-tool", title: "#{t('keppler.actions.edit') }" do
              -#     %i.icon-pencil
              - if can?(KepplerTravel::Reservation).destroy?
                = link_to admin_travel_reservation_path(@reservation), class: "btn btn-box-tool", title: "#{t('keppler.actions.delete')}", method: :delete, data: { confirm: t("keppler.messages.data_confirm") } do
                  %i.icon-trash
          .box-body.box-body-no-padding
            %table.table.table-striped
              %tbody
                - @reservation.as_json(only: ["origin", "arrival", 'origin_location', 'arrival_location', 'flight_origin', 'flight_arrival', 'quantity_adults', 'quantity_kids', 'quantity_kit', 'round_trip', 'airline_origin', 'airline_arrival', 'flight_number_origin', 'flight_number_arrival', 'description', 'user']).each do |attribute, value|
                  - unless attribute.eql?('position') || attribute.eql?('deleted_at')
                    %tr.list-row
                      %th.display-label= t("activerecord.attributes.#{attribute}")
                      %td.display-value.fs-body-1.tc-black-2
                        - if @attachments.include?(attribute)
                          = image_tag value.url unless value.url.blank?
                        - else
                          = value.blank? ? '-----------' : value


  .show-section
    .row
      .col-lg-12
        .box.slice-box
          .box-header.with-border
            %h3.box-title Datos de los Viajeros
            .box-tools.pull-right
          .box-body.box-body-no-padding
            %table.table.table-striped
              %tbody
                - @reservation.travellers.each_with_index do |traveller, index|
                  %tr.list-row
                    %th.display-label= "Viajero # #{index+1}"
                    %td.display-value.fs-body-1.tc-black-2
                      = traveller.name.blank? ? '-----------' : "#{traveller.name.titleize} - #{traveller.dni}"

  -# %br
  -# %br
  -#
  -# .show-section
  -#   .box.slice-box
  -#     .box-header.with-border
  -#       %h3.box-title Recorrido de la ruta del traslado
  -#     .col-xs-12.col-lg-8#gmap{style: 'width: 700px; height: 400px;'}
  -#
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br
  -# %br

  .show-section
    .row
      .col-lg-5
        - @reservation.reservationable.as_json(only: ["cover"]).each do |attribute, value|
          .box.slice-box
            .box-header.with-border
              %h3.box-title Cover
              .box-tools.pull-right
                -# %a.btn.btn-box-tool{"data-widget" => "collapse", type: "button"}
                -#   %i.fa.fa-minus
            .box-body.box-body-no-padding
              - unless value.url.blank?
                = image_tag value.url, class: 'img-show'
      .col-lg-7
        .box.slice-box
          .box-header.with-border
            %h3.box-title Datos del Vehículo
          .box-body.box-body-no-padding
            %table.table.table-striped
              %tbody
                - @reservation.reservationable.as_json(only: ["title", "seat", "kit", "price"]).each do |attribute, value|
                  %tr.list-row
                    %th.display-label= t("activerecord.attributes.#{attribute}")
                    %td.display-value.fs-body-1.tc-black-2.text-overflow= value.blank? ? '-----------' : value


%br
%br
%br
%br
%br
%br
%br
%br
%br
%br
%br
%br
%br
%br

%script{:src => "https://maps.googleapis.com/maps/api/js?key=AIzaSyDt6Fm4Tge8PJpUNhByW314XyvQGJRpDFc&sensor=false&libraries=places", :type => "text/javascript"}

:javascript

  var map;
  var marker = [];
  var lantitude_edit = #{raw  4.710988599}
  var longitude_edit = #{raw -74.072092}

  function initialize() {

    var myLatlng = new google.maps.LatLng(lantitude_edit, longitude_edit);
    var options = {
      zoom:5,
      center: myLatlng,
      types: [],
      componentRestrictions: {country: "col"},
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById("gmap"), options);
    marker = new google.maps.Marker({
      position: new google.maps.LatLng(lantitude_edit, longitude_edit),
      map: map
    });


    var input = document.getElementById('destination_title');
    var autocomplete = new google.maps.places.Autocomplete(input, options);

    autocomplete.addListener('place_changed', onPlaceChanged);

    // When the user selects a city on input search, get the place details for the city and
    // zoom the map in on the city.
    function onPlaceChanged() {
      var place = autocomplete.getPlace();
      var latitude = place.geometry.location.lat();
      var longitude = place.geometry.location.lng();
      console.log('Latitude', latitude);
      console.log('Longitude', longitude);

      $("#destination_lang").val(latitude);
      $("input[name='destination[latitude]']").val(latitude);

      // $("input[name='destination[latitude]']").attr("value", parseFloat(latitude));
      $("#destination_long").val(longitude);
      $("input[name='destination[longitude]']").val(longitude);

      // $("input[name='destination[longitude]']").attr("value", parseFloat(longitude));
       // $('form').append(`<input type="hidden" name="destination[latitude]" value="${latitude}" /> `);
       // $('form').append(`<input type="hidden" name="destination[longitude]" value="${longitude}" /> `);

      if (place.geometry) {
        map.panTo(place.geometry.location);
        map.setZoom(12);
         marker = new google.maps.Marker({
          position: new google.maps.LatLng(latitude,longitude),
          map: map
        });
      } else {
        document.getElementById('autocomplete').placeholder = 'Enter a city';
      }

    }

  }

  google.maps.event.addDomListener(window, 'load', initialize);
