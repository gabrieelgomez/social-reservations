continue
contine
@kids.to_i
@adults.to_i
@adults
@tour.price_kids
@tour.price_adults
@tour
continue
continu
continue
params
continue
@reservation.reservationable
@reservation
@reservationable
continue
@user
@reservation.valid?
@reservation
params
continue
@reservationable['type']
@reservationable[:type]
@reservationable
session[:reservationable]
session[:user]
exit
session[:reservationable]
@reservationable
continue
session[:reservationable]
sessions[:reservationable]
continue
session.delete(:reservationable)
session.delete(:travellers)
session.delete(:reservation)
session[:reservationable]
@reservationable.class
@reservationable
continue
params[:reservationable_type]
@render = params[:reservationable_type].downcase.pluralize
params
continue
params
continue
params
continue
session.delete(:invoice)
session.delete(:tour)
session.delete(:vehicle)
session.delete(:user)
session.delete(:travellers)
session[:reservation]
session.delete(:reservation)
params[:travellers]
params
params[:user]
params[:user]
session[:travellers]
session[:invoice]
session[:user]
session[:tour]
session[:reservation]
continue
"app/front/reservations/#{@render}/index"
@render
continue
params[:reservationable_type].downcase.pluralize
params[:reservationable_type].downcase
params[:reservationable_type].upcase
params[:reservationable_type]
params
continue
@flight_origin_picker
@kids
@adults
@results
@result
@currency
@lang
continue
@results
continue
@vehicle.kit['quantity']
@vehicle.kit
@vehicle
exit
@tour.activity
@tour.description
@tour.name
@tour
@tourname
@tour
@tour.activity
@tour
@tour.activity
@tour.name
@tour.activity
@tour
tour_params
params
continue
exit
params
tour_params
tour_params[:name]
tour_params[:task]
@tour.task
@tour
tour_params
params[:tour]
params[:tour_params]
params[:task]
params
tour_params[:name]
tour_params[:task]
@tour
@tour.task = tour_params[:task]
tour_params[:activity]
tour_params[:task]
tour_params[:name]
params
tour_params[:task]
tour_params[:activity]
exit
tour_params[:activity]
params
@tour.activity
continue
contine
@tour.files.count
@tour.files.first
@tour.files.first.url
@tour.files.first
@tour.files
continue
@tour.destination_ids.include?(destination.id) ? 'selected' : ''
continue
@tour.destination_ids.include?(destination.id) ? 'selected' : ''
continue
@tour.destination_ids
@tour.destination_ids.include?(destination.id) ? 'selected' : ''
@tour.destination_ids.include?(destination.id)
continue
params[:tour][:destination_ids].split(',').map(&:to_i)
params[:tour][:destination_ids].split(',')
params[:tour][:destination_ids]
continue
params[:tour][:destination_ids]
params
continue
params[:tour][:destination_ids]
continue
params[:tour][:destination_ids]
params[:tour]
continue
params[:tour]
params[:tour][:destination_ids]
continue
params[:tour][:destination_ids]
params[:destination_ids]
params
continue
@objects
params
continue
User.first.has_role? :partner
Role.count
Role.all
all_roles = Role.all.map { |rol| [rol.name.humanize, rol.id] }
@roles
continue
obj.select { |u| u.has_role? role_id.to_sym }
objobj.select { |u| u.has_role? role_id.to_sym }
obj
role_id
continue
role_id
User.select{|user| user.has_role}
User.select{}
obj
exit
obj
continue
@users
continue
@users
continue
partner.eql?('false') ? user.add_role? :partner : user.remove_role? :partner
user.has_role? :partner
user.add_role :partner if partner.eql?('false')
partner
partnert
user
continue
user
partner = params[:partner]
params[:partner]
params
continue
user.has_role? :partner
user.has_role? :partners
user.has_role? :partner
a
a = 0 if user.has_role? :client
user.has_role? :client
user.has_role? :client ? a=0 : b=1
user.has_role? :client
user.has_role? : client
user = User.find(params[:user_id])
User.find(params[:user_id])
params
continue
User.find(params[:u]}}}}}}}}}}}}})
params
continue
user_params[:password]
continue
user_params[:password]
user_params[:password].blank?
params
continue
user_params[:password].blank?
user_params[:password]
user_params[:password_confirmation]
user_params
update_attributes
user_params
continue
user_params
params
exit
continue
self.status.to_sym.eql?(status)
self.status.eql?(status)
self.status
self
status
exit
continue
status
continue
current_user.reservations.first.reservationable_type
current_user.reservations.reservationable_type
current_user.reservations.reservationable
current_user.reservations
current_user.reservations.first
current_user.reservations.reservationable
current_user.reservations
continue
controller_name
action_name
continue
params
