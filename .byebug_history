exit
lodgment.rooms.map(&:id).include?(cr.room_id)
cr.room_id
lodgment.rooms.map(&:id).include?(cr.id)
lodgment.rooms.map(&:id)
lodgment
logment
cr
exit
cr
self.rooms.map(&:type_room)
self.rooms
self
exit
self
continue
self.type_rooms.try(:exclude?, room) ? true : false
self.type_room
self
exit
continue
circuitable.circuitable_rooms.first.room
circuitable.circuitable_rooms.first
circuitable.circuitable_rooms
circuitable.circuitable_room
circuitable
circuitable.lodgment
circuitable.lodgmnet
circuitable.destination
circuitable
room
continue
circuitable
continue
namee = @circuit.destinations.first.lodgments.first.name_room('1')
namee.flatten[1]
namee.flatten
namee[0][1]
namee[0]
namee[1]
namee
namee = @circuit.destinations.first.lodgments.first.name_room('1')
aaa[1]
aaa[]
aaa = @circuit.destinations.first.lodgments.first.name_room('1')
@circuit.destinations.first.lodgments.first.name_room('1')
circuit.destinations.first.lodgments.first.name_room('1')
continue
@name
id
type
circuit.destinations.first.lodgments.first.name_room('1')
continue
@circuit.destinations.first.lodgments.first.name_room('1')
@circuit.destinations.first.lodgments.first.type_room_name('1')
circuit.destinations.first.lodgments.first.type_room_name('1')
continue
circuit.destinations.first.lodgments.first.type_room_name('1')
@circuit.destinations.first.lodgments.first.type_room_name('1')
continue
@circuit.destinations.first.lodgments.first.type_room_name('1')
circuit
circuit.destinations.first.lodgments.first.type_room_name('1')
continue
circuit.destinations.first.lodgments.first.type_room_name('1')
circuit.destinations.first.lodgments.first.type_rooms
circuit.destinations.first.lodgments.first
circuit.destinations.first.lodgments.first.type_rooms.each.first
circuit.destinations.first.lodgments.first.type_rooms
circuit.destinations.first.lodgments.first.type_rooms.count
circuit.destinations.first.lodgments.first.type_rooms
circuit.destinations.first.lodgments.first
params
circuit
exit
room.valid?
room.valid!
room = KepplerTravel::Room.new(type_room: 'simpless', price: {cop: '123', usd: '34'})
continue
room.save!
room.valid!
room.valid?
room = KepplerTravel::Room.new(type_room: 'simpless', price: {cop: '123', usd: '34'})
continue
room.circuitable
room.circuit
room.valid?
room = KepplerTravel::Room.new(type_room: 'simpless', price: {cop: '123', usd: '34'})
room = KepplerTravel::Room.new(price: {cop: '123', usd: '34'})
@circuit.rooms
continue
@circuit.rooms
@circuit.room
@circuit.rooms
continue
@circuit.rooms
@circuit.room
@circuit.valid?
@circuit
continue
room.valid?
room = KepplerTravel::Room.new(price: {cop: '123', usd: '34'})
continue
room = KepplerTravel::Room.new(price: {cop: '123', usd: '34'})
room = KepplerTravel::Room.new(type: 'simpless', price: {cop: '123', usd: '34'})
room = KepplerTravel::Room.new(type: 'simple', price: {cop: '123', usd: '34'})
room = Room.new(type: 'simple', price: {cop: '123', usd: '34'})
@circuit.destinations.third.lodgment_ids
@circuit.destinations.second.lodgment_ids
@circuit.destinations.first.lodgment_ids
@circuit.destination_ids
@circuit.destinations_ids
@circuit.destinations.destination_ids
@circuit.destinations.third.lodgment_ids
@circuit.destinations.second.lodgment_ids
@circuit.destinations.first.lodgment_ids
@circuit.destinations.first.lodgments.first.type_rooms.split(',').map(&:to_i).count
@circuit.destinations.first.lodgments.first.type_rooms.split(',').map(&:to_i)
@circuit.destinations.first.lodgments.first.type_rooms.include?('1')
@circuit.destinations.first.lodgments.first.type_rooms.include?('9')
@circuit.destinations.first.lodgments.first.type_rooms
@circuit.destinations.first.lodgments.first.type_rooms.split(',').map(&:to_i)
@circuit.destinations.first.lodgments.first.type_rooms.split('[').map(&:to_i)
@circuit.destinations.first.lodgments.first.type_rooms.split(',')
continue
@circuit.destinations.first.lodgments.first.type_rooms
@circuit.destinations.first.lodgments.first.type_rooms.split('[').unshift
@circuit.destinations.first.lodgments.first.type_rooms.split('[')
@circuit.destinations.first.lodgments.first.type_rooms.split('[').split(']')
@circuit.destinations.first.lodgments.first.type_rooms.split('[')
@circuit.destinations.first.lodgments.first.type_rooms.split('[').map(&:to_i).first
@circuit.destinations.first.lodgments.first.type_rooms
@circuit.destinations.first.lodgments.first.type_rooms.split(',').map(&:to_i).first
@circuit.destinations.first.lodgments.first.type_rooms.split(',').map(&:to_i)
@circuit.destinations.first.lodgments.first.type_rooms.count
@circuit.destinations.first.lodgments.first.type_rooms
@circuit.destinations.first.lodgment_ids
@circuit.destination_ids
continue
@circuit.destinations.
@circuit.destinations
@circuit.circuitables
@circuit.rooms
@circuit.lodgments
@circuit.lodgment
@circuit.lodgments
@circuit.lodgment
@circuit.rooms
@circuit.lodgments
@circuit.logdments
@circuit.logdment
@circuit.circuitables.create
@circuit.circuitables
@circuit
exit
Circuitable.new
Lodgment.first.circuitables
@circuit.destinations.collect(&:lodgments).flatten.first.circuitables
@circuit.destinations.collect(&:lodgments).flatten.first.circuits
@circuit.destinations.collect(&:lodgments).flatten.first.circuitables
@circuit.destinations.collect(&:lodgments).flatten.first.circuitable
@circuit.destinations.collect(&:lodgments).flatten.first
@circuit.rooms
@circuit.lodgments
@circuit.circuitables
@circuit.destinations.collect(&:lodgments).flatten
@circuit.destinations.collect(&:lodgments).flatten.first.title
@circuit.destinations.collect(&:lodgments)
@circuit.destinations.collect(&:lodgments).first.ransack
@circuit.destinations.collect(&:lodgments).first
@circuit.destinations.collect(&:lodgments)
@circuit.destinations.collect(&:lodgments).flatten
@circuit.destinations.collect(&:lodgments).flatten.count
@circuit.destinations.collect(&:lodgments).flattent.count
@circuit.destinations.second.lodgments.count
@circuit.destinations.first.lodgments
@circuit.destinations.firs.lodgments
@circuit.destination_ids
@circuit.destinations.collect(&:lodgments).count
@circuit.destinations.collect(&:lodgments)
@circuit.destinations.join(:lodgments)
@circuit.destinations.include(:lodgments)
@circuit.destinations
@circuit.destination_ids
@circuit
params
exit
destination
lodgment
exit
continue
lodgment
exit
lodgment.destination.title['es']
exit
continue
destination.lodgments
destination
continue
@lodgment.type_rooms.first
@lodgment.type_rooms
@lodgment.type_rooms = params[:lodgment][:type_rooms].split(',').map(&:to_i)
@lodgment.type_rooms
@lodgment.type_rooms = params[:lodgment][:type_rooms]
params[:lodgment][:type_rooms]
continue
@lodgment.type_rooms = "sadas"
@lodgment
@logdment
params[:lodgment][:type_rooms]
continue
params[:lodgment][:type_rooms]
params[:lodgment]
params[:type_rooms]
params
continue
@lodment.destination
exit
continue
lodgment.destination_ids
lodgment
continue
@price_total
continue
@reservation['round_trip']
@price_total
continue
object['round_trip'] == 'true' ? price.to_f*2 : price.to_f
price.to_f*2
object['round_trip']
object
price
locality
continue
locality
exit
locality
continue
locality
exit
locality
continue
locality
exit
continue
locality
exit
locality
continue
@reservationable
@reservationable.set_price
@reservationable
exit
continue
params[:origin_location]
params[:round_trip]
