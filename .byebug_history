continue
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.reject(&:zero?).min
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.reject(&:zero?)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.reject(&:zero?).min
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.reject(&:zero?)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.reject
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min(2)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min(0)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min(0)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min_by(0)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min_by(2).first
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min_by(2)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.compact
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.compact(0)
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.compact
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.compac
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min_by{|x| x != 0}
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min != 0
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min == 0
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min ?= 0
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min != 0
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten.min
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}.flatten
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(&:price_cop)}
@results.circuitables.collect{|cc|  cc.circuitable_rooms.map(:price_cop)}
@results.circuitables.first.circuitable_rooms.first
@results.circuitables.first.circuitable_rooms.first.price
@results.circuitables.first.circuitable_rooms.price
@results.circuitables.first.circuitable_rooms.first.room
@results.circuitables.first.circuitable_rooms.first.rooms
@results.circuitables.first.circuitable_rooms
@results.circuitables.first.rooms
@results.circuitables.first
@results.circuitables
@results
@result
continue
params
module_name
Reservation.where(reservationable_type: "KepplerTravel::#{module_name.titleize}")
Reservation.where(reservationable_type: "KepplerTravel::#{model_name.titleize}")
Reservation.where(reservationable_type: 'adas')
Reservation.select(:id, :status).distinct
Reservation.select(:id, :status)
Reservation.select(:status)
Reservation.where(id: 9)
@objects = reservations.page(@current_page).order(id: :desc)
reservations = @q.result(distinct: true) unless @q.empty?
@q = Reservation.all.select{|res| res.reservationable.class_str.downcase == 'vehicle'}
reservations = @q.result(distinct: true) unless @q.empty?
reservations = @q.result(distinct: true) unless @q.nil?
reservations = @q.result(distinct: true)
@q = Reservation.all.select{|res| res.reservationable.class_str.downcase == 'vehicle'}
Reservation.where{|res| res.reservationable.class_str.downcase == 'vehicle'}
Reservation.all.where{|res| res.reservationable.class_str.downcase == 'vehicle'}
Reservation.all.select{|res| res.reservationable.class_str.downcase == 'vehicle'}
@q = Reservation.ransack(reservationable_eql: "KepplerTravel::Vehicle").result
@q = Reservation.ransack(reservationable_type_eql: "KepplerTravel::Vehicle").result
continue
reservations
reservations.vehicles
reservations = @q.result(distinct: true)
@q = Reservation.ransack(params[:q])
@q = Reservation.ransack(params[:q]).result.ransack(reservationable_type_eql: "KepplerTravel::Vehicle").result
@q = Reservation.ransack(params[:q]).result.ransack(reservationable_type: "KepplerTravel::Vehicle").result
@q = Reservation.ransack(params[:q]).result.ransack(reservationable_type: "KepplerTravel::Vehicle").result.count
@q = Reservation.ransack(params[:q]).result.ransack(reservationable_type: "KepplerTravel::Vehicle")
@q = Reservation.ransack(params[:q]).ransack(reservationable_type: "KepplerTravel::Vehicle")
@q = Reservation.ransack(params[:q]).ransack(reservationable_type: )
reservations = @q.result(distinct: true)
@q = Reservation.ransack(params[:q])
params[:model_name]
continue
@total_price     = @total_adults + @total_kids
@total_kids      = @reservationable.calculate_kids(kids, @currency) * kids
@total_adults    = @reservationable.price_adults[@currency].to_f * adults
seats
kids
adults
continue
SecureRandom.random_number(1000..9999)
SecureRandom.random_number(100)
@invoice
@reservation
exit
room.room
r
self.rooms.map(&:id).
selfself.rooms.map(&:id)
self
room
exit
room
exit
room.id
self.rooms.map(&:id)
self.rooms
self.rooms.map(&:id).include?(room.id) ? false : true
self.rooms.map(&:id).include?
self
room
exit
continue
circuitable.circuitable_rooms.first.price_cop
circuitable.circuitable_rooms
circuitable
continue
exit
lookup_model_names.join('_')
reflection_or_attribute_name
lookup_model_names
lookup_action
column
attribute_name
input_type
exit
params[:circuit_circuitables]
params[:circuit][:circuit_circuitables]
params[:circuit][:circuit_circuitable]
params[:circuit_circuitable]
params
exit
@lang
room
continue
circuit_params
params
continue
params[:circuit][:circuitables_attributes]
params[:circuit][circuitables_attributes]
params[:circuit]
params[:circuit_circuitables][:status]
params[:circuit_circuitables]
params[:circuitables_rooms_params]
params
circuitables_rooms_params
circuitable_params
params
@circuit
params
continue
params
params['0']
params[:0]
params
params['circuitable_rooms_attributes']
params[:circuitable_rooms_attributes]
circuitable_rooms_attributes
params
circuit_params
exit
cr.object
continue
circuitables.lodgment
circuitable
circuitables.price
circuitables
continue
params[:circuitable_rooms].count
params[:circuitable_rooms]
params
continue
continu
params[:price][:single][:cop]
params[:price][:single]
params[:price][0]
params[:price].first
params[:price]
params
@circuit.circuitables.first.circuitable_rooms.second
@circuit.circuitables.first.circuitable_rooms.first
@circuit.circuitables.first.circuitable_rooms
@circuit.circuitables.first
@circuit.circuitables.first.rooms
@circuit.circuitables.first.roms
@circuit
params
continue
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}.firstcon
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}.first
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}.title
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}
Destination.all.select{|dest| dest.lodgment_ids.include?(3)}
Destination.all.select{|dest| dest.lodgment_ids.include?(3)}.
Destination.all.select{|dest| dest.lodgment_ids.include?(3)}.flatten
Destination.all.select{|dest| dest.lodgment_ids.include?(3)}.flatten.first
Destination.all.select{|dest| dest.lodgment_ids.include?(3)}.count
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}.count
Destination.all.select{|dest| dest.lodgment_ids.include?(2)}
Destination.all.select{|dest| dest.lodgment_ids.include?([2])}.count
Destination.where(lodgment_ids: [2])
Destination.find(lodgment_ids: [2])
Destination.where(lodgment_ids: [2])
Destination.where(lodgment_ids: [3]).count
Destination.where(lodgment_ids: [3])
Destination.where.(lodgment_ids: [3])
Destination.first.lodgment_ids
Destination.first
averga
averga.blank?
averga.empty?
averga = lodgments - lodgments_circuitables
averga.empty?
averga.empty??
averga.blank?
averga.nil?
averga = [1,2] - [1,2]
lodgments_circuitables = circuit.circuitables.map(&:lodgment_id)
lodgments = circuit.circuitables.map(&:destination).map(&:lodgment_ids).flatten
averga = [1] - lodgments_circuitables
averga = [2] - lodgments_circuitables
averga = lodgments_circuitables - lodgments
averga = lodgments -lodgments_circuitables
a - c
a.exclude?(c)
a.exclude(c)
a.exclude(b)
a | c
c = [2]
b = [2]
a = [1,2]
lodgments_circuitables = circuit.circuitables.map(&:lodgment_id)
lodgments = circuit.circuitables.map(&:destination).map(&:lodgment_ids).flatten
lodgments_circuitables = circuit.circuitables.map(&:lodgment_id)
lodgments_circuitables = circuit.circuitables.map(:lodgment_id)
lodgments = destinations.map(&:lodgment_ids).flatten
destinations.map(&:lodgment_ids)
destinations = circuit.circuitables.map(&:destination)
destinations = circuit.circuitables.map(&:destinations)
destinations = circuit.circuitables.map(&:destination_id)
destinations.first
destinations.first.lodgment
destinations.first.lodgments
destinations.map(&:lodgment_ids)
destinations = circuit.circuitables.map(&:destination_id)
lodgments = circuit.circuitables.map(&:lodgment_id)
circuit.circuitables.map(&:lodgment_id)
circuit.circuitables
circuit
exit
lodgment.rooms.map(&:id).include?(cr.room_id)
cr.room_id
lodgment.rooms.map(&:id).include?(cr.id)
lodgment.rooms.map(&:id)
lodgment
logment
cr
exit
cr
self.rooms.map(&:type_room)
self.rooms
self
exit
self
